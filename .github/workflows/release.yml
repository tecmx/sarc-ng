name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  GO_VERSION: "1.24"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate Wire
        run: make wire

      - name: Build binaries
        run: |
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-ng-linux-amd64 ./cmd/server
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-cli-linux-amd64 ./cmd/cli

          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-ng-linux-arm64 ./cmd/server
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-cli-linux-arm64 ./cmd/cli

          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-ng-darwin-amd64 ./cmd/server
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-cli-darwin-amd64 ./cmd/cli

          # macOS ARM64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-ng-darwin-arm64 ./cmd/server
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/sarc-cli-darwin-arm64 ./cmd/cli

          # Lambda (Linux AMD64)
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }}" -o build/bootstrap ./cmd/lambda

      - name: Create checksums
        run: |
          cd build
          sha256sum * > checksums.txt

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.6.2
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ### Linux (AMD64)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/sarc-ng-linux-amd64
            chmod +x sarc-ng-linux-amd64
            sudo mv sarc-ng-linux-amd64 /usr/local/bin/sarc-ng
            ```

            ### macOS (Apple Silicon)
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/sarc-ng-darwin-arm64
            chmod +x sarc-ng-darwin-arm64
            sudo mv sarc-ng-darwin-arm64 /usr/local/bin/sarc-ng
            ```

            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ```

            ## Checksums
            See `checksums.txt` for SHA256 checksums of all binaries.
          files: |
            build/sarc-ng-*
            build/sarc-cli-*
            build/bootstrap
            build/checksums.txt
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
